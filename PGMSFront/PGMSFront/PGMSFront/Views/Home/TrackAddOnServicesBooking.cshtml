@model PGMSFront.Models.CommonModel
@{
    ViewBag.Title = "Add-On Services";
    if (Convert.ToString(Session["SessBookingType"]).ToUpper() == "TRACK")
    {
        Layout = "~/Views/Shared/_LayoutTrack.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_LayoutLab.cshtml";
    }
}

<style>
    #blink-text {
        animation-name: blink;
        animation-duration: 2s;
        animation-timing-function: ease-in;
        animation-iteration-count: infinite;
    }

    .table > tbody > tr > td {
        padding: 2px 8px !important;
        cursor: pointer !important;
    }

    .card {
        margin-bottom: 0px !important;
        margin-top: 25px !important;
    }

    .bootstrap-select {
        margin-top: 16px !important;
    }

    .main-panel > .content {
        margin-top: 0 !important;
    }

    .card .card-body {
        padding: 0px 5px 5px 5px !important;
    }

    #AddMoreTR {
        background: lightblue;
    }
</style>
<div class="content">
    @using (Html.BeginForm(new { @class = "form-horizontal" }))
    {
        @Html.AntiForgeryToken()
        <div class="container-fluid">
            @Html.Partial("~/Views/Home/BookingHeader.cshtml")

            <div class="row" style="margin-bottom:-35px;">
                <p id="blink-text" style="color:red;"><b>Optional Services: If you required then add.</b></p>
            </div>
            <div class="row">

                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title">
                            @if (Model.StatusPropId == 40 && Model.RFQId == 0 && (Model.WorkFlowId == 6 || Model.WorkFlowId == 57 || Model.WorkFlowId == 29 || Model.WorkFlowId == 36 || Model.WorkFlowId == 38))
                            {
                                @*<button type="button" class="btn btn-fill btn-rose btn-sm" onclick="AddMore()" id="btnAdd">Add More</button>*@
                                <button type="button" class="btn btn-fill btn-rose btn-sm" onclick="Add()">Add More</button>

                            }
                            <span class="pull-right">
                                <label class="card-title"> Add-On Services Count : </label> <label class="card-title" id="lblWSCount"></label>
                            </span>
                        </h4>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="table-responsive">
                                    <table class="table">
                                        <thead class=" text-primary">
                                            <tr>
                                                <th width="17%">Description</th>
                                                @*@if (Model.BPId == 46 || Model.BPId == 91)
                                                    {
                                                        <th width="12%" style="text-align:center">Day</th>
                                                    }
                                                    else
                                                    {*@
                                                <th width="12%" style="text-align:center">Date</th>
                                                @*}*@

                                                <th width="12%" style="text-align:center">Consumption</th>
                                                <th width="10%" style="text-align:center">Unit</th>
                                                @if (Model.WorkFlowId == 57 || Model.WorkFlowId == 58 ||
                                                Model.WorkFlowId == 29 || Model.WorkFlowId == 51 ||
                                                Model.WorkFlowId == 38 || Model.WorkFlowId == 53 ||
                                                Model.WorkFlowId == 6 || Model.WorkFlowId == 8 ||
                                                Model.WorkFlowId == 36 || Model.WorkFlowId == 44)
                                                {
                                                    <th width="10%" style="text-align:right;display:none">Rate</th>
                                                    <th width="10%" style="text-align:right;display:none">Amount</th>
                                                }
                                                else
                                                {
                                                    <th width="10%" style="text-align:right">Rate</th>
                                                    if (Model.WorkFlowId == 59 || Model.WorkFlowId == 52 || Model.WorkFlowId == 54)
                                                    {
                                                        <th class="text-right" width="10%">Quot. Amount</th>
                                                    }
                                                    else
                                                    {
                                                        <th width="10%" style="text-align:right">Amount</th>
                                                    }
                                                }

                                                <th width="17%">Remark</th>
                                                <th width="12%" class="text-center">Action</th>
                                            </tr>
                                        </thead>
                                        <tbody id="tbodyWS">
                                            <tr id="AddMoreTR" style="display: none;">
                                                <td>
                                                    <select class="form-control" id="ServiceType" onchange="SetRateUnit()">
                                                        <option value="0">-Select-</option>
                                                        @foreach (var itm in ViewBag.ServiveLookup)
                                                        {
                                                            <option value='@itm.Value'>@itm.Text</option>
                                                        }
                                                    </select>
                                                </td>
                                                @*@if (Model.BPId == 46 || Model.BPId == 91)
                                                    {
                                                        <td><input id="Day" type="text" style="text-align: center" onkeypress='return CheckIsNumeric(event,this);' onchange="SetRateUnit()" class="form-control" value=""></td>
                                                    }
                                                    else
                                                    {*@
                                                <td><input id="Date" type="text" style="text-align:center" onblur="SetRateUnit()" class="form-control datetimepicker"></td>
                                                @* }*@

                                                <td><input id="Consumption" type="text" style="text-align:center" onchange="CalculateAmount()" onkeypress='return CheckIsNumeric(event,this);' class="form-control" value=""></td>
                                                <td><input id="Unit" disabled="disabled" style="text-align:center" type="text" class="form-control" value=""></td>
                                                @if (Model.WorkFlowId == 57 || Model.WorkFlowId == 58 ||
                                                    Model.WorkFlowId == 29 || Model.WorkFlowId == 51 ||
                                                    Model.WorkFlowId == 38 || Model.WorkFlowId == 53 ||
                                                    Model.WorkFlowId == 6 || Model.WorkFlowId == 8 ||
                                                    Model.WorkFlowId == 36 || Model.WorkFlowId == 44
                                                    )
                                                {
                                                    <td style="text-align:right;display:none"><input id="Rate" disabled="disabled" style="text-align:right;display:none" type="text" class="form-control" value=""></td>
                                                    <td style="text-align:right;display:none"><input id="Amount" disabled="disabled" type="text" style="text-align:right;display:none" class="form-control" value=""></td>

                                                }
                                                else
                                                {
                                                    <td><input id="Rate" disabled="disabled" style="text-align:right" type="text" class="form-control" value=""></td>
                                                    <td><input id="Amount" disabled="disabled" type="text" style="text-align:right" class="form-control" value=""></td>
                                                }
                                                <td><textarea id="Remark" class="form-control"></textarea></td>
                                                <td class='td-actions text-center'>
                                                    <button type='button' rel='tooltip' id="btnSave" onclick="return AddOnServicesSave()" class='btn btn-info' data-original-title='' title=''><i class='material-icons'>save</i></button>
                                                    <button type='button' rel='tooltip' class='btn btn-danger' data-original-title='' title='' onclick="AddMoreCancel()"><i class='material-icons'>close</i></button>
                                                </td>
                                                <td style='display:none'><input type='hidden' id='hdnUOMPropId' /> </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <br />
                        <table Style="width:100%">
                            <tr>
                                <td Style="width:10%;text-align:left">
                                    <input type="submit" id="btnPrev" name="btnPrevNext" value="Prev" class="btn btn-fill btn-rose btn-sm " />
                                </td>
                                <td Style="width:80%;text-align:center">
                                    <label id="msg" style="color: red; padding: 5px; border-radius: 5px;"></label>
                                </td>
                                <td Style="width:10%;text-align:right">
                                    <input type="submit" id="btnNext" name="btnPrevNext" value="Next" class="btn btn-fill btn-rose btn-sm " />
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
                @Html.HiddenFor(m => m.BookingAddOnServiceId, new { id = "hiddenBookingAddOnServiceId", style = "width:0px;" })
                @Html.HiddenFor(m => m.UserId, new { id = "UserId", style = "width:0px;" })
                @Html.HiddenFor(m => m.UserTypePropId, new { id = "UserTypePropId", style = "width:0px;" })
                @Html.HiddenFor(m => m.ZZCompanyId, new { id = "ZZCompanyId", style = "width:0px;" })
                @Html.HiddenFor(m => m.WorkFlowId, new { id = "WorkFlowId", style = "width:0px;" })
                @Html.HiddenFor(m => m.StatusPropId, new { id = "StatusPropId", style = "width:0px;" })
                @Html.HiddenFor(m => m.StateId, new { id = "StateId", style = "width:0px;" })
                @Html.HiddenFor(m => m.BPId, new { id = "BPId", style = "width:0px;" })
                @Html.HiddenFor(m => m.DocId, new { id = "DocId", style = "width:0px;" })
                @Html.HiddenFor(m => m.ReportURL, new { id = "ReportURL", style = "width:0px;" })
                @Html.HiddenFor(m => m.POURL, new { id = "POURL", style = "width:0px;" })
                @Html.HiddenFor(m => m.RFQId, new { id = "RFQId", style = "width:0px;" })
            </div>
        </div>
    }
</div>

<div class="modal fade" id="PopupFromDateToDate" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title bgTitle">Add More</h4>
                <button type="button" class="close" aria-hidden="true" onclick="Close()">
                    <i class="material-icons">clear</i>
                </button>
            </div>
            <div class="modal-body" style="text-align:center">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group" style="text-align: left">
                            <label>From Date</label>
                            <input type="text" id="FromDate" class="form-control datetimepicker" placeholder="DD-MM-YYYY">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group" style="text-align: left">
                            <label>To Date</label>
                            <input type="text" id="ToDate" class="form-control datetimepicker" placeholder="DD-MM-YYYY">
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="form-group" style="text-align: left">
                            <label>Description</label>
                            <select class="form-control" id="ServiceTypePOP" onchange="SetRateUnitPOP()">
                                <option value="0">-Select-</option>
                                @foreach (var itm in ViewBag.ServiveLookup)
                                {
                                    <option value='@itm.Value'>@itm.Text</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group" style="text-align: left">
                            <label>Consumption</label>
                            <input id="ConsumptionPOP" type="text" onchange="CalculateAmountPOP()" onkeypress='return CheckIsNumeric(event,this);' class="form-control">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group" style="text-align: left">
                            <label>Unit</label>
                            <input id="UnitPOP" disabled="disabled" type="text" class="form-control">
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="form-group" style="text-align: left">
                            <label>Remark</label>
                            <textarea id="RemarkPOP" class="form-control" style="height: 50px !important;"></textarea>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="btnGenerateRepeatRowWAddon" class="btn btn-fill btn-rose btn-sm" style="margin-top: 5px;" onclick="Save()">Save</button>
                @*<button type="button" id="btnGenerateRepeatRowWAddon" class="btn btn-fill btn-rose btn-sm" style="margin-top: 5px;" onclick="GenerateRepeatRowAddon()">Save</button>*@
                <button type="button" class="btn btn-fill btn-danger btn-sm" data-dismiss="modal" style="margin-left: 5px; margin-top: 5px;" onclick="Close()">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    var BookingAddOnServiceId = 0;
    var LoadAddOnServicesList = '';
    var ColourRowId = -1;
    var Holdid = '';
    function AddMore() {
        BookingAddOnServiceId = 0;
        $("#msg").html('** Add your details in the blue row and click on <i class="material-icons">save</i> icon **');
        $("#AddMoreTR").find("button[id='btnSave']").each(function () {
            $(this).show();
        });
        $("#AddMoreTR").find("select[id='ServiceType']").each(function () {
            $(this).val(0);
        });
        $("#AddMoreTR").find("input[type='text'][id='Date']").each(function () {
            $(this).val("");
            $('.datetimepicker').datetimepicker({ theme: 'light', timepicker: false, format: 'd-m-Y', scrollMonth: false, scrollInput: false });
        });
        $("#AddMoreTR").find("input[type='text'][id='Day']").each(function () {
            $(this).val("");
        });
        $("#AddMoreTR").find("input[type='text'][id='Consumption']").each(function () {
            $(this).val("");
        });
        $("#AddMoreTR").find("input[type='text'][id='Unit']").each(function () {
            $(this).val("");
        });
        $("#AddMoreTR").find("input[type='text'][id='Rate']").each(function () {
            $(this).val("");
        });
        $("#AddMoreTR").find("input[type='text'][id='Amount']").each(function () {
            $(this).val("");
        });
        $("#AddMoreTR").find("textarea[id='Remark']").each(function () {
            $(this).val("");
        });
        $("#AddMoreTR").find("input[type='hidden'][id='hdnUOMPropId']").each(function () {
            $(this).val("");
        });

        $("#AddMoreTR").show();
        MaskControls();
        $("#ServiceType").focus();

    }
    function AddMoreCancel() {
        $("#AddMoreTR").hide();
        $("#msg").html('');
    }

    function Add() {
        $("#PopupFromDateToDate").modal("show");
    }

    function Close() {
        $("#PopupFromDateToDate").modal("hide");
        POPSetDates();
        $("#ServiceTypePOP").val(0);
        $("#ConsumptionPOP").val("");
        $("#UnitPOP").val("");
        $("#RemarkPOP").val("");
    }

    var MinInDay = 0;

    ///////////////////////////// Load Vehicle Info  //////////////////////////////////////////////////////
    function LoadAddOnServicesInfo() {
        try {
            LoaderShow();
            var data = {};
            var dataWithAntiforgeryToken = $.extend(data, { "__RequestVerificationToken": $("input[name=__RequestVerificationToken]").val() });
            $.ajax({
                url: '@Url.Action("LoadAddOnServicesInfo", "Home")',
                type: 'POST',
                dataType: 'json',
                async: true,
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    debugger;
                    LoaderHide();
                    if (data.StatusId != "99" && data.StatusId != "-99") {
                        LoadAddOnServicesList = data.LoadAddOnServicesList;
                        // MinInDay = LoadAddOnServicesList[0].ZZMinInDay;
                        BindWSData(data.LoadAddOnServicesList);
                        //if (LoadAddOnServicesList.length > 0) {
                        //    $("#btnNext").show();
                        //}
                    }
                    else {
                       alert(data.Status);
                    }
                },
                error: function (xhr) {

                    LoaderHide();
                    alert(xhr.responseText);
                }
            });
        }
        catch (e) {

            LoaderHide();
            alert(e.message);
            //  return false;
        }
    }

    //////////////////////// Vehicle Edit ////////////////////////////////////////////////////////////
    function AddOnServicesEdit(varBookingAddOnServiceId) {
        try {
            $("#msg").html('** Edit your details in the blue row and click on <i class="material-icons">save</i> icon **');
            BookingAddOnServiceId = 0;
            if (LoadAddOnServicesList.length > 0) {
                var varWS = jQuery.grep(LoadAddOnServicesList, function (obj) {
                    return obj.BookingAddOnServiceId == varBookingAddOnServiceId;
                });

                BookingAddOnServiceId = NullHandle(varWS[0].BookingAddOnServiceId);

                $("#AddMoreTR").find("button[id='btnSave']").each(function () {
                    $(this).show();
                });
                $("#AddMoreTR").find("select[id='ServiceType']").each(function () {
                    $(this).val(NullHandle(varWS[0].ServiceId));
                });
                $("#AddMoreTR").find("input[type='text'][id='Date']").each(function () {
                    $(this).val(NullHandle(varWS[0].ZZServiceDate));
                    $('.datetimepicker').datetimepicker({ theme: 'light', timepicker: false, format: 'd-m-Y', scrollMonth: false, scrollInput: false });
                });
                $("#AddMoreTR").find("input[type='text'][id='Day']").each(function () {
                    $(this).val(NullHandle(varWS[0].BookingDay));
                });
                $("#AddMoreTR").find("input[type='text'][id='Consumption']").each(function () {
                    $(this).val(NullHandle(varWS[0].Consumption));
                });
                $("#AddMoreTR").find("input[type='text'][id='Unit']").each(function () {
                    $(this).val(NullHandle(varWS[0].ZZUOM));
                });
                $("#AddMoreTR").find("input[type='text'][id='Rate']").each(function () {
                    $(this).val(NullHandle(varWS[0].Rate));
                });
                $("#AddMoreTR").find("input[type='text'][id='Amount']").each(function () {
                    $(this).val(NullHandle(varWS[0].Amount));
                });
                $("#AddMoreTR").find("textarea[id='Remark']").each(function () {
                    $(this).val(NullHandle(varWS[0].Remark));
                });
                $("#AddMoreTR").find("input[type='hidden'][id='hdnUOMPropId']").each(function () {
                    $(this).val(NullHandle(varWS[0].UOMPropId));
                });

                $("#AddMoreTR").show();
                MaskControls();
                $("#ServiceType").focus();
            }
        }
        catch (e) {

        }
    }

    function compareDate(dateStr) {
        var Split = dateStr.split("-");
        var varDD = Split[0];
        var varMM = Split[1];
        var varYY = Split[2];
        return new Date(varYY + '-' + varMM + '-' + varDD); // 2022-03-01
    }

    ///////////////////////////// Vehicle Save  //////////////////////////////////////////////////////

    var tf = true;

    function AddOnServicesSave() {
        debugger;
        try {
            var model = {};
            var strMSG = '';
            var varWS = jQuery.grep(LoadAddOnServicesList, function (obj) {
                return obj.BookingAddOnServiceId == BookingAddOnServiceId;
            });
            var btnSave = "";

            if (parseInt(BookingAddOnServiceId) > 0 && varWS != undefined && varWS.length > 0) {
                model = varWS[0];
            }
            else {
                model.BookingAddOnServiceId = -1;
            }

            $("#AddMoreTR").find("button[id='btnSave']").each(function () {
                btnSave = $(this);
            });
            $("#AddMoreTR").find("select[id='ServiceType']").each(function () {
                model.ServiceId = $(this).val();
                if ($(this).val() == "") {
                    strMSG = strMSG + 'Select Description \n</br>'
                }
            });
            //if (parseInt($("#BPId").val()) == 46 || parseInt($("#BPId").val()) == 91) {
            //    $("#AddMoreTR").find("input[type='text'][id='Day']").each(function () {
            //        model.BookingDay = $(this).val().trim();
            //        if ($(this).val().trim() == "" || parseInt($(this).val().trim()) <= 0) {
            //            strMSG = strMSG + 'Day \n</br>'
            //        }
            //    });
            //}
            //else {
                $("#AddMoreTR").find("input[type='text'][id='Date']").each(function () {
                    model.ZZServiceDate = $(this).val().trim();
                    if ($(this).val().trim() == "") {
                        strMSG = strMSG + 'Select Date \n</br>'
                    }
                });
           // }

            $("#AddMoreTR").find("input[type='text'][id='Consumption']").each(function () {
                model.Consumption = $(this).val().trim();
                if ($(this).val().trim() == "" || parseInt($(this).val().trim()) <= 0) {
                    strMSG = strMSG + 'Consumption \n</br>'
                }
            });
            $("#AddMoreTR").find("input[type='hidden'][id='hdnUOMPropId']").each(function () {
                model.UOMPropId = $(this).val();
            });
            $("#AddMoreTR").find("input[type='text'][id='Rate']").each(function () {
                model.Rate = $(this).val().trim();
            });
            $("#AddMoreTR").find("input[type='text'][id='Amount']").each(function () {
                model.Amount = $(this).val().trim();
            });
            $("#AddMoreTR").find("textarea[id='Remark']").each(function () {
                model.Remark = $(this).val().trim();
                //if ($(this).val().trim() == "") {
                //    strMSG = strMSG + 'Remark  \n</br>'
                //}
            });
            // alert(model.ZZServiceDate) // 16-03-2022
            const todayFullDate = new Date();
            const yyyy = todayFullDate.getFullYear();
            let mm = todayFullDate.getMonth() + 1; // Months start at 0!
            let dd = todayFullDate.getDate();

            if (dd < 10) dd = '0' + dd;
            if (mm < 10) mm = '0' + mm;

            const todayDate = dd + '-' + mm + '-' + yyyy;
            // alert(todayDate) // 16-03-2022

            var modelDate = compareDate(model.ZZServiceDate);
            var currentDate = compareDate(todayDate);
            debugger
            //var today = new Date().getHours(); // For testing: 10, 11, 12, 23, 00
            if (parseInt($("#BPId").val()) == 21 || parseInt($("#BPId").val()) == 90) {
                //if (modelDate.getTime() === currentDate.getTime()) {
                //    if (today >= 11 && today <= 23) {
                //        strMSG = strMSG + 'Coupons request cannot be raised between 11:00 AM to 12:00 AM.\n</br>'
                //    }
                //} else
                    if (modelDate.getTime() < currentDate.getTime()) {
                        strMSG = strMSG + 'Request cannot be raised for past date.\n</br>'
                }
            }

            if (strMSG != '') {
                alert("Please enter data for Mandatory fields  \n</br>" + strMSG);
                return false;
            }
            else {

                if (parseInt(model.UOMPropId) == 14) {
                    if (parseInt(model.Consumption) != 1) {
                        alert('Services having unit "DAY" Consumption should be 1');
                        return;
                    }
                    if (LoadAddOnServicesList != null && LoadAddOnServicesList.length > 0) {
                        var varWSTmp = "";
                        //if (parseInt($("#BPId").val()) == 46 || parseInt($("#BPId").val()) == 91) {
                        //    varWSTmp = jQuery.grep(LoadAddOnServicesList, function (obj) {
                        //        return obj.ServiceId == model.ServiceId && obj.BookingDay == model.BookingDay;
                        //    });
                        //}
                        //else {
                            varWSTmp = jQuery.grep(LoadAddOnServicesList, function (obj) {
                                return obj.ServiceId == model.ServiceId && ToDate(obj.ZZServiceDate).getTime() == ToDate(model.ZZServiceDate).getTime();
                            });
                        //}
                        if (varWSTmp != undefined && varWSTmp != null && ((parseInt(model.BookingAddOnServiceId) == -1 && varWSTmp.length > 0) || (parseInt(model.BookingAddOnServiceId) > 0 && varWSTmp.length > 1))) {
                            alert('Services having unit "DAY" not allowed multiple for the same day/date');
                            return;
                        }
                    }
                }
                LoaderShow();


                if (parseInt($("#BPId").val()) == 21 || parseInt($("#BPId").val()) == 90) {
                    // tf = true;
                    checkMinInDay();
                }
                //  (false && 0 == 1)
                if (tf) {
                    debugger
                    btnSave.hide();
                    var data = { 'model': model };
                    var dataWithAntiforgeryToken = $.extend(data, { "__RequestVerificationToken": $("input[name=__RequestVerificationToken]").val() });
                    $.ajax({
                        url: '@Url.Action("AddOnServicesSave", "Home")',
                        type: 'POST',
                        dataType: 'json',
                        async: true,
                        data: dataWithAntiforgeryToken,
                        //contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            LoaderHide();
                            if (data.StatusId != "99" && data.StatusId != "-99") {
                                $("#msg").html('');
                                LoadAddOnServicesList = data.LoadAddOnServicesList;
                                // MinInDay = LoadAddOnServicesList[0].ZZMinInDay;
                                BindWSData(data.LoadAddOnServicesList);
                                if (LoadAddOnServicesList.length > 0) {
                                    $("#btnNext").show();
                                }
                            }
                            saveFlag = 0;
                            btnSave.show();
                            alert(data.Status);
                        },
                        error: function (xhr) {
                            saveFlag = 0;
                            btnSave.show();
                            LoaderHide();
                            alert(xhr.responseText);
                        }
                    });
                } else {
                    LoaderHide();
                    saveFlag = 0;
                    alert("Daily Consumption limit is over for the day. So can't book Service.")
                }
            }
        }
        catch (e) {
            LoaderHide();
            btnSave.show();
            alert(e.message);
            return false;
        }
    }

    function Save() {
        try {
            var model = {};
            var modelDate = {};
            var strMSG = '';
            modelDate.StrOne = $("input[id='FromDate']").val();
            modelDate.StrTwo = $("input[id='ToDate']").val();
            modelDate.IntOne = -1;
            modelDate.IntTwo = -1;

            model.BookingAddOnServiceId = -1;
            model.ServiceId = $("select[id='ServiceTypePOP']").val();
            model.ZZServiceDate = $("input[type='text'][id='FromDate']").val();
            model.Consumption = $("input[type='text'][id='ConsumptionPOP']").val();
            model.UOMPropId = $("input[type='hidden'][id='hdnUOMPropId']").val();
            model.Rate = $("input[type='text'][id='Rate']").val();
            model.Amount = $("input[type='text'][id='Amount']").val();
            model.Remark = $("textarea[id='RemarkPOP']").val();
            var Fromdate = new Date(SetDateMMDDYYYY(modelDate.StrOne));
            var Todate = new Date(SetDateMMDDYYYY(modelDate.StrTwo));
            var FromdateVal = new Date(SetDateMMDDYYYY(strFromDate));
            var strMSG = "";
            if (Fromdate <= FromdateVal) {
                strMSG = strMSG + 'From Date should be greater than selected date. \n</br>'
            } else if (modelDate.StrOne == "") {
                strMSG = strMSG + 'From Date is required. \n</br>'
            } else if (modelDate.StrTwo == "") {
                strMSG = strMSG + 'To Date is required. \n</br>'
            } else if (Todate < Fromdate) {
                strMSG += "<br /> \n From date should not be greater than To date. \n";
            }

            if (model.ServiceId == 0) {
                strMSG = strMSG + 'Description is required. \n</br>'
            }
            if (model.Consumption == "") {
                strMSG = strMSG + 'Consumption is required. \n</br>'
            }
            const todayFullDate = new Date();
            const yyyy = todayFullDate.getFullYear();
            let mm = todayFullDate.getMonth() + 1;
            let dd = todayFullDate.getDate();
            if (dd < 10) dd = '0' + dd;
            if (mm < 10) mm = '0' + mm;
            const todayDate = dd + '-' + mm + '-' + yyyy;
            var modelDate1 = compareDate(model.ZZServiceDate);
            var currentDate = compareDate(todayDate);
            var today = new Date().getHours(); // For testing: 10, 11, 12, 23, 00
            if (parseInt($("#BPId").val()) == 21 || parseInt($("#BPId").val()) == 90) {
                if (modelDate1.getTime() === currentDate.getTime()) {
                    if (today >= 11 && today <= 23) {
                        strMSG = strMSG + 'Coupons request cannot be raised between 11:00 AM to 12:00 AM.\n</br>'
                    }
                } else if (modelDate1.getTime() < currentDate.getTime()) {
                        strMSG = strMSG + 'Coupons request cannot be raised for past date.\n</br>'
                }
            }
            if (strMSG != '') {
                alert("Please enter data for Mandatory fields. \n</br>" + strMSG);
                return false;
            }
            else {
                if (parseInt(model.UOMPropId) == 14) {
                    if (parseInt(model.Consumption) != 1) {
                        alert('Services having unit "DAY" Consumption should be 1');
                        return;
                    }
                    if (LoadAddOnServicesList != null && LoadAddOnServicesList.length > 0) {
                        var varWSTmp = "";
                        varWSTmp = jQuery.grep(LoadAddOnServicesList, function (obj) {
                            return obj.ServiceId == model.ServiceId && ToDate(obj.ZZServiceDate).getTime() == ToDate(model.ZZServiceDate).getTime();
                        });
                        if (varWSTmp != undefined && varWSTmp != null && ((parseInt(model.BookingAddOnServiceId) == -1 && varWSTmp.length > 0) || (parseInt(model.BookingAddOnServiceId) > 0 && varWSTmp.length > 1))) {
                            alert('Services having unit "DAY" not allowed multiple for the same day/date');
                            return;
                        }
                    }
                }

                LoaderShow();
                if (parseInt($("#BPId").val()) == 21 || parseInt($("#BPId").val()) == 90) {
                    checkMinInDayPOP();
                }
                if (tf) {
                    var data = { 'model': model, 'modelDate': modelDate };
                    var dataWithAntiforgeryToken = $.extend(data, { "__RequestVerificationToken": $("input[name=__RequestVerificationToken]").val() });
                    $.ajax({
                        url: '@Url.Action("AddOnServicesInsert", "Home")',
                        type: 'POST',
                        dataType: 'json',
                        async: true,
                        data: dataWithAntiforgeryToken,
                        success: function (data) {
                            LoaderHide();
                            if (data.StatusId != "99" && data.StatusId != "-99") {
                                Close();
                                LoadAddOnServicesList = data.LoadAddOnServicesList;
                                BindWSData(data.LoadAddOnServicesList);
                                if (LoadAddOnServicesList.length > 0) {
                                    $("#btnNext").show();
                                }
                            }
                            saveFlag = 0;
                            alert(data.Status);
                        },
                        error: function (xhr) {
                            saveFlag = 0;
                            LoaderHide();
                            alert(xhr.responseText);
                        }
                    });
                } else {
                    LoaderHide();
                    saveFlag = 0;
                    alert("Daily Consumption limit is over for the day. So can't book Service.")
                }
            }
        }
        catch (e) {
            LoaderHide();
            alert(e.message);
            return false;
        }
    }

    var saveFlag = 0;

    function checkMinInDay() {
        debugger
        var modelChk = {};
        var compEdit = 0;
        $("#AddMoreTR").find("input[type='text'][id='Date']").each(function () {
            modelChk.dtFromDate = $(this).val().trim();
        });

        $("#AddMoreTR").find("select[id='ServiceType']").each(function () {
            modelChk.IntOne = $(this).val();
        });

        $("#AddMoreTR").find("input[type='text'][id='Consumption']").each(function () {
            compEdit = $(this).val();
        });

        modelChk.IntTwo = $("#BPId").val();
        var data = { 'model': modelChk };
        var dataWithAntiforgeryToken = $.extend(data, { "__RequestVerificationToken": $("input[name=__RequestVerificationToken]").val() });
        $.ajax({
            url: '@Url.Action("DailyServiceCount", "Home")',
            type: 'POST',
            dataType: 'json',
            async: false,
            data: dataWithAntiforgeryToken,
            success: function (data) {
                LoaderHide();
                if (data.StatusId != "99" && data.StatusId != "-99") {
                    debugger
                    // 5 > 10
                    if (data.StatusId == "1" || data.StatusId == "2") {
                        var comp = 0;
                        var totalComp = 0;
                        if (data.DailyServiceCountList.length > 0) {
                            comp = data.DailyServiceCountList[0].Consumption;
                        }
                        if (MinInDay == 0) {
                            MinInDay = LoadAddOnServicesList[0].ZZMinInDay;
                        }
                        totalComp = (parseInt(comp) + parseInt(compEdit));
                        // alert("Min in day: " + MinInDay + " Consumption: " + totalComp);
                        if (MinInDay < totalComp) {
                            // no save
                            tf = false;
                        } else {
                            // save
                            tf = true;
                        }
                    } else {
                            tf = true;
                    }
                } else {
                    tf = false;
                }
            },
            error: function (xhr) {
                LoaderHide();
                alert(xhr.responseText);
            }
        });
    }

    function checkMinInDayPOP() {
        debugger
        var modelChk = {};
        modelChk.dtFromDate = $("#FromDate").val().trim();
        modelChk.IntOne = $("#ServiceTypePOP").val();
        modelChk.IntTwo = $("#BPId").val();
        var data = { 'model': modelChk };
        var dataWithAntiforgeryToken = $.extend(data, { "__RequestVerificationToken": $("input[name=__RequestVerificationToken]").val() });
        $.ajax({
            url: '@Url.Action("DailyServiceCount", "Home")',
            type: 'POST',
            dataType: 'json',
            async: false,
            data: dataWithAntiforgeryToken,
            success: function (data) {
                LoaderHide();
                if (data.StatusId != "99" && data.StatusId != "-99") {
                    debugger
                    // 5 > 10
                    if (data.StatusId == "1" || data.StatusId == "2") {
                        var comp = 0;
                        var totalComp = 0;
                        if (data.DailyServiceCountList.length > 0) {
                            comp = data.DailyServiceCountList[0].Consumption;
                        }
                        totalComp = (comp + parseInt($("#ConsumptionPOP").val()));
                        // alert("Min in day: " + MinInDay + " Consumption: " + totalComp);
                        if (MinInDay < totalComp) {
                             // no save
                            tf = false;
                        } else {
                            // save
                            tf = true;
                        }
                    } else {
                            tf = true;
                    }
                } else {
                    tf = false;
                }
            },
            error: function (xhr) {
                LoaderHide();
                alert(xhr.responseText);
            }
        });
    }

    ///////////////////////////// Delete Info  //////////////////////////////////////////////////////
    function AddOnServicesDelete(varBookingAddOnServiceId) {

        try {
            $.confirm({
                title: 'Confirm Alert!',
                content: "Are you sure want to delete?",
                icon: 'fa fa-question',
                closeIcon: true,
                animation: 'scale',
                type: 'orange',
                escapeKey: 'cancel',
                buttons: {
                    MyFunction: {
                        text: 'OK',
                        action: function () {
                            LoaderShow();
                            var data = { 'intBookingAddOnServiceId': varBookingAddOnServiceId };
                            var dataWithAntiforgeryToken = $.extend(data, { "__RequestVerificationToken": $("input[name=__RequestVerificationToken]").val() });
                            $.ajax({
                                url: '@Url.Action("AddOnServicesDelete", "Home")',
                                type: 'POST',
                                dataType: 'json',
                                async: true,
                                data: dataWithAntiforgeryToken,
                                success: function (data) {

                                    LoaderHide();
                                    if (data.StatusId != "99" && data.StatusId != "-99") {
                                        $("#msg").html('');
                                        LoadAddOnServicesList = data.LoadAddOnServicesList;
                                        BindWSData(data.LoadAddOnServicesList);

                                        if (LoadAddOnServicesList.length > 0) {
                                            $("#btnNext").show();
                                        }
                                        else {
                                            $("#btnNext").hide();
                                        }
                                    }
                                    alert(data.Status);
                                },
                                error: function (xhr) {

                                    LoaderHide();
                                    alert(xhr.responseText);
                                }
                            });

                        }
                    },
                    cancel: function () {
                    }
                }
            });

        }
        catch (e) {

            LoaderHide();
            alert(e.message);
            //  return false;
        }
    }

    ///////////////////////////// Bind Info  //////////////////////////////////////////////////////
    function BindWSData(data) {
        try {
            var gridData = "";
            var StatusPropId = $("#StatusPropId").val();
            var WorkFlowId = $("#WorkFlowId").val();
            //var row = $('#tbodyVehicle').find('tr:eq(0)');

            gridData = '<tr id="AddMoreTR" style="display: none;">' + $("#AddMoreTR").html() + '</tr>';

            $("#lblWSCount").text(NullHandle(data.length));

            $("#tbodyWS").html("");

            for (var i = 0; i < data.length; i++) {

                var indx = i + 1;
                gridData = gridData + "<tr id='trTrack_" + indx + "'>";



                gridData = gridData + "<td>" + NullHandle(data[i].ZZServiceName) + "</td>";
                //if (parseInt($("#BPId").val()) == 46 || parseInt($("#BPId").val()) == 91) {
                //    gridData = gridData + "<td style='text-align:center'>" + NullHandle(data[i].BookingDay) + "</td>";
                //}
                //else {
                    gridData = gridData + "<td style='text-align:center'>" + NullHandle(data[i].ZZServiceDate) + "</td>";
               // }

                gridData = gridData + "<td style='text-align:center'>" + NullHandle(data[i].Consumption) + "</td>";
                gridData = gridData + "<td style='text-align:center'>" + NullHandle(data[i].ZZUOM) + "</td>";

                if (parseInt($("#WorkFlowId").val()) == 57 || parseInt($("#WorkFlowId").val()) == 58 ||
                    parseInt($("#WorkFlowId").val()) == 29 || parseInt($("#WorkFlowId").val()) == 51 ||
                    parseInt($("#WorkFlowId").val()) == 38 || parseInt($("#WorkFlowId").val()) == 53 ||
                    parseInt($("#WorkFlowId").val()) == 6 || parseInt($("#WorkFlowId").val()) == 8 ||
                    parseInt($("#WorkFlowId").val()) == 44 || parseInt($("#WorkFlowId").val()) == 36
                    ) {
                    gridData = gridData + "<td style='text-align:right;display:none'>" + NullHandle(data[i].Rate) + "</td>";
                    gridData = gridData + "<td style='text-align:right;display:none'>" + NullHandle(data[i].Amount) + "</td>";
                }
                else {
                    if (parseInt($("#WorkFlowId").val()) == 59 || parseInt($("#WorkFlowId").val()) == 52 || parseInt($("#WorkFlowId").val()) == 54) {
                        gridData = gridData + "<td style='text-align:right'>" + NullHandleFloat(parseFloat(data[i].QuotAmount) / parseFloat(data[i].Consumption)) + "</td>";
                        gridData = gridData + "<td class='text-right'>" + NullHandle(data[i].QuotAmount) + "</td>";
                    }
                    else {
                        gridData = gridData + "<td style='text-align:right'>" + NullHandle(data[i].Rate) + "</td>";
                        gridData = gridData + "<td style='text-align:right'>" + NullHandle(data[i].Amount) + "</td>";
                    }
                }

                gridData = gridData + "<td>" + NullHandle(data[i].Remark) + "</td>";

                if (parseInt($("#StatusPropId").val()) == 40 && parseInt($("#RFQId").val()) == 0 && (parseInt($("#WorkFlowId").val()) == 6 || parseInt($("#WorkFlowId").val()) == 57 || parseInt($("#WorkFlowId").val()) == 29 || parseInt($("#WorkFlowId").val()) == 36 || parseInt($("#WorkFlowId").val()) == 38)) {
                    gridData = gridData + "<td class='td-actions text-center'>";
                    gridData = gridData + "<button type='button' rel='tooltip' class='btn btn-info' title='Edit Addon Service : " + NullHandle(data[i].ZZServiceName) + "' onclick='return AddOnServicesEdit(" + NullHandle(data[i].BookingAddOnServiceId) + ")' > <i class='material-icons'>edit</i></button>&nbsp;";
                    // gridData = gridData + "<button type='button' rel='tooltip' class='btn btn-info' title='Copy Addon Service: " + NullHandle(data[i].ZZServiceName) + "' onclick='return AddonBookingDetailCopy(" + NullHandle(data[i].BookingAddOnServiceId) + ")' > <i class='fa fa-copy'></i></button>&nbsp;";
                    gridData = gridData + "<button type='button' rel='tooltip' class='btn btn-danger' title='Delete Addon Service : " + NullHandle(data[i].ZZServiceName) + "' onclick='return AddOnServicesDelete(" + NullHandle(data[i].BookingAddOnServiceId) +")'><i class='material-icons'>close</i></button>";
                    gridData = gridData +"</td>";
                }
                else {
                    gridData = gridData + "<td class='text - center'></td>";
                }
                //gridData = gridData + "<td style='display:none'><input type='hidden' id='hdnUOMPropId' value=" + NullHandle(data[i].UOMPropId) + " /> </td>";
                gridData = gridData + "</tr>";
            }

            $("#tbodyWS").html(gridData);


        }
        catch (e) {

        }
    }

    //////////////////////// Set Rate Unit ////////////////////////////////////////////////////////
    function SetRateUnit() {
        try {
            var varDate = "";
            //if (parseInt($("#BPId").val()) == 46 || parseInt($("#BPId").val()) == 91) {
            //    varDate = $("#Day").val().trim();
            //}
            //else {
                varDate = $("#Date").val().trim();
           // }
            var varServiceId = $("#ServiceType").val();
            var varTimeSlotId = 0;

            var strMSG = "";
            if (parseInt(varServiceId) == 0) {
                alert("Select Description");
                return false;
            }

            if (varDate=="") {
                return false;
            }


            if (strMSG != '') {
                alert("Please enter data for Mandatory fields  \n</br>" + strMSG);
                return false;
            }
            else {

                var data = '';
                var varServiceList = [];

                varServiceList[0] = NullHandle(varServiceId);

                var data = { 'intlstServiceId': varServiceList, 'intTimeSlotId': parseInt(varTimeSlotId), 'strWED': varDate };
                var dataWithAntiforgeryToken = $.extend(data, { "__RequestVerificationToken": $("input[name=__RequestVerificationToken]").val() });
            LoaderShow();
            $.ajax({
                url: '@Url.Action("BookingStatusGetByServiceIdTimeSlotPropIdWEFDate", "Home")',
                type: 'POST',
                dataType: 'json',
                async: true,
                data: dataWithAntiforgeryToken,
               // contentType: "application/json; charset=utf-8",
                success: function (dataBokkingStatus) {
                    debugger
                    LoaderHide();

                    if (dataBokkingStatus.StatusId != "99" && dataBokkingStatus.StatusId != "-99") {
                        var varBookingStatusList = dataBokkingStatus.BookingStatusList;
                        MinInDay = parseInt(dataBokkingStatus.BookingStatusList[0].ZZBookingInADay);
                        var varConsumption = 0;
                        if (varBookingStatusList.length > 0) {
                            $("#AddMoreTR").find("input[type='text'][id='Consumption']").each(function () {
                                varConsumption = $(this).val().trim();
                                if (varConsumption == undefined || varConsumption == "") {
                                    varConsumption=0
                                }
                            });

                            $("#AddMoreTR").find("input[type='text'][id='Unit']").each(function () {
                                $(this).val(NullHandle(varBookingStatusList[0].UOM));
                            });
                            $("#AddMoreTR").find("input[type='text'][id='Rate']").each(function () {
                                $(this).val(NullHandle(varBookingStatusList[0].Rate));
                            });
                            $("#AddMoreTR").find("input[type='text'][id='Amount']").each(function () {
                                $(this).val(parseFloat(varBookingStatusList[0].Rate) * parseFloat(varConsumption));
                            });
                            $("#AddMoreTR").find("input[type='hidden'][id='hdnUOMPropId']").each(function () {
                                $(this).val(NullHandle(varBookingStatusList[0].UOMPropId));
                            });
                        }
                    }
                    else {
                        alert(data.Status);
                    }
                },
                error: function (xhr) {

                    LoaderHide();
                    alert(xhr.responseText);
                }
            });
            }
        }
        catch (e) {
            LoaderHide();
            alert(xhr.responseText);
        }
    }

    function SetRateUnitPOP() {
        try {
            var varDate = $("#FromDate").val().trim();
            var varServiceId = $("#ServiceTypePOP").val();
            var varTimeSlotId = 0;

            var strMSG = "";
            if (parseInt(varServiceId) == 0) {
                alert("Select Description");
                return false;
            }
            if (varDate=="") {
                return false;
            }
            if (strMSG != '') {
                alert("Please enter data for Mandatory fields  \n</br>" + strMSG);
                return false;
            }
            else {
                var data = '';
                var varServiceList = [];
                varServiceList[0] = NullHandle(varServiceId);
                var data = { 'intlstServiceId': varServiceList, 'intTimeSlotId': parseInt(varTimeSlotId), 'strWED': varDate };
                var dataWithAntiforgeryToken = $.extend(data, { "__RequestVerificationToken": $("input[name=__RequestVerificationToken]").val() });
                LoaderShow();
                $.ajax({
                    url: '@Url.Action("BookingStatusGetByServiceIdTimeSlotPropIdWEFDate", "Home")',
                    type: 'POST',
                    dataType: 'json',
                    async: true,
                    data: dataWithAntiforgeryToken,
                    success: function (dataBokkingStatus) {
                        LoaderHide();
                        debugger
                        if (dataBokkingStatus.StatusId != "99" && dataBokkingStatus.StatusId != "-99") {
                            var varBookingStatusList = dataBokkingStatus.BookingStatusList;
                            MinInDay = parseInt(dataBokkingStatus.BookingStatusList[0].ZZBookingInADay);
                            var varConsumption = 0;
                            if (varBookingStatusList.length > 0) {
                                varConsumption = $("input[type='text'][id='ConsumptionPOP']").val();
                                if (varConsumption == undefined || varConsumption == "") {
                                    varConsumption = 0;
                                }
                                $("input[type='text'][id='UnitPOP']").val(NullHandle(varBookingStatusList[0].UOM));
                                $("input[type='text'][id='Rate']").val(NullHandle(varBookingStatusList[0].Rate));
                                $("input[type='text'][id='Amount']").val(parseFloat(varBookingStatusList[0].Rate) * parseFloat(varConsumption));
                                $("input[type='hidden'][id='hdnUOMPropId']").val(NullHandle(varBookingStatusList[0].UOMPropId));
                            }
                        }
                        else {
                            alert(data.Status);
                        }
                    },
                    error: function (xhr) {
                        LoaderHide();
                        alert(xhr.responseText);
                    }
                });
            }
        }
        catch (e) {
            LoaderHide();
            alert(xhr.responseText);
        }
    }

    ///////////////////////////// Calculate Amount  //////////////////////////////////////////////////////
    function CalculateAmount() {
        try {
            var varConsumption = 0;
            var varRate = 0;
            $("#AddMoreTR").find("input[type='text'][id='Consumption']").each(function () {
                varConsumption = $(this).val().trim();
                if (varConsumption == undefined || varConsumption == "") {
                    varConsumption = 0
                }
            });
            $("#AddMoreTR").find("input[type='text'][id='Rate']").each(function () {
                varRate = $(this).val().trim();
                if (varRate == undefined || varRate == "") {
                    varRate = 0
                }
            });
            $("#AddMoreTR").find("input[type='text'][id='Amount']").each(function () {
                $(this).val(parseFloat(varRate) * parseFloat(varConsumption));
            });
        }
        catch (e) {

        }
    }

    function CalculateAmountPOP() {
        try {
            var varConsumption = 0;
            var varRate = 0;
            varConsumption = $("input[type='text'][id='ConsumptionPOP']").val();
            if (varConsumption == undefined || varConsumption == "") {
                varConsumption = 0
            }

            varRate = $("input[type='text'][id='Rate']").val();
            if (varRate == undefined || varRate == "") {
                varRate = 0
            }

            $("input[type='text'][id='Amount']").val(parseFloat(varRate) * parseFloat(varConsumption));
        }
        catch (e) {

        }
    }

    ///////////////////////////// Set Button Visibility  //////////////////////////////////////////////////////
    function SetButtonVisibility() {
        try {
            if (parseInt($("#StatusPropId").val()) == 40 && parseInt($("#RFQId").val()) == 0 && (parseInt($("#WorkFlowId").val()) == 6 || parseInt($("#WorkFlowId").val()) == 57 || parseInt($("#WorkFlowId").val()) == 29 || parseInt($("#WorkFlowId").val()) == 36 || parseInt($("#WorkFlowId").val()) == 38)) {
                $("#btnAdd").attr('disabled', false);
            }
            else {
                $("#btnAdd").attr('disabled', true);
            }
        }
        catch (e) {

        }
    }


    ///////////////////////////// Masking  //////////////////////////////////////////////////////
    function MaskControls() {
        try {
            (function ($) {
                $(function () {

                    $("#AddMoreTR").find("input[type='text'][id='Consumption']").each(function () {
                        $(this).attr('onkeypress', 'return CheckIsNumeric(event,this);');
                    });

                });
            })(jQuery);
        }
        catch (e) {

        }
    }


    function AddonBookingDetailCopy(BookingAddOnServiceId) {
        try {
            $("#hiddenBookingAddOnServiceId").val(BookingAddOnServiceId);
            $("#PopupFromDateToDate").modal("show");
        } catch { }

    }

    function RepeatRowAddon() {
        debugger
        if ($("#DocId").val().trim() == "" || $("#DocId").val().trim() == undefined
            || $("#DocId").val().trim() == null) {
            alert("Booking Details not found.");

        } else if ($("#hiddenBookingAddOnServiceId").val().trim() == ""
            || $("#hiddenBookingAddOnServiceId").val().trim() == null
            || $("#hiddenBookingAddOnServiceId").val().trim() == undefined
            || $("#hiddenBookingAddOnServiceId").val().trim() == 0
        ) {
            alert("Please select Addon detail row");
        } else {

            $("#FromDate").val("");
            $("#ToDate").val("");
            $("#PopupFromDateToDate").modal("show");
        }
    }

    var strFromDate = "";
    function SelectRow(varZZDate, RowId, varBookingAddOnServiceId, varCaption) {
        try {
            debugger;
            strFromDate = varZZDate;
            $("#hiddenBookingAddOnServiceId").val(varBookingAddOnServiceId);
            $("#txtTrackName").text(varCaption);
            ColourRowId = RowId;
            changeColorTrack(RowId);
        }
        catch (e) {

        }
    }

    function SetDateMMDDYYYY(dateStr) {
        debugger;
        var strDate
        var Split = dateStr.split("-");
        var varDD = Split[0];
        var varMM = Split[1];
        var varYY = Split[2];
        var now = new Date(varMM + '-' + varDD + '-' + varYY);
        var Day = now.getDate()
        var Month = (now.getMonth() + 1)
        var Year = now.getFullYear()
        if (Day < 10) {
            Day = "0" + Day;
        }
        if (Month < 10) {
            Month = "0" + Month;
        }
        strDate = Month + "-" + Day + "-" + Year;
        return strDate;
    }

    function changeColorTrack(id) {
        debugger
        $("#trTrack_" + Holdid + "").removeClass('highlighted');
        $("#trTrack_" + id + "").addClass('highlighted');
        Holdid = id;
    }

    function GenerateRepeatRowAddon() {
        try {
            debugger;
            var varFromDate = $("#FromDate").val().trim();
            var varToDate = $("#ToDate").val().trim();
            var varBookingAddOnServiceId = $("#hiddenBookingAddOnServiceId").val();
            var varBookingId = $("#DocId").val().trim();

            var Fromdate = new Date(SetDateMMDDYYYY($("#FromDate").val().trim()));
            var Todate = new Date(SetDateMMDDYYYY($("#ToDate").val().trim()));

            var FromdateVal = new Date(SetDateMMDDYYYY(strFromDate));
            var strMSG = "";
            if (Fromdate <= FromdateVal) {
                strMSG = strMSG + 'From Date should be greater than selected date  \n</br>'
            } else
                if (varFromDate == "") {
                    strMSG = strMSG + 'From Date  \n</br>'
                }
                else if (varToDate == "") {
                    strMSG = strMSG + 'To Date  \n</br>'
                }

                else
                    if (Todate < Fromdate) {
                        strMSG += "<br /> \n From date should not be greater than To date. \n";
                    }

            if (strMSG != '') {
                alert("Please enter data for Mandatory fields  \n</br>" + strMSG);
                return false;
            }
            else {

                $("#btnGenerateRepeatRowAddon").hide();
                LoaderShow();
                var model={ };
                model.IntOne = varBookingAddOnServiceId;
                model.IntTwo = varBookingId;
                model.StrOne = varFromDate;
                model.StrTwo = varToDate;

                 var data = { 'model': model};
                 var dataWithAntiforgeryToken = $.extend(data, { "__RequestVerificationToken": $("input[name=__RequestVerificationToken]").val() });
                $.ajax({
                    url: '@Url.Action("BookingDetailAddOnServicesInsertFrontRepeatRow", "Home")',
                    type: 'POST',
                    dataType: 'json',
                    async: true,
                    data: dataWithAntiforgeryToken,
                    success: function (data) {
                        debugger;
                        LoaderHide();
                        if (data.StatusId != "99" && data.StatusId != "-99") {
                            $("#PopupFromDateToDate").modal("hide");
                            LoadAddOnServicesList = data.LoadAddOnServicesList;
                            BindWSData(data.LoadAddOnServicesList);
                        }
                        $("#btnGenerateRepeatRowWorkShop").show();
                        alert(data.Status);
                    },
                    error: function (xhr) {

                        $("#btnGenerateRepeatRowWorkShop").show();
                        LoaderHide();
                        alert(xhr.responseText);
                    }
                });
            }
        }
        catch (e) {

            LoaderHide();
            $("#btnRepeatRow").show();
            alert(e.message);
            return false;
        }
    }

    function ToDate(strdate) {
        var parts = strdate.split("-");
        if (parts.length < 3) {
            parts = strdate.split("/");
        }
        return new Date(parts[2], parts[1] - 1, parts[0])
    }

    function POPSetDates() {
        var today1 = new Date();
        var dd1 = today1.getDate();
        var mm1 = today1.getMonth()+1;
        var yyyy1 = today1.getFullYear();
        if(dd1<10){dd1='0'+dd1} if(mm1<10){mm1='0'+mm1} today1 = dd1+'/'+mm1+'/'+yyyy1;
        $("#FromDate").val(today1);
        $("#ToDate").val(today1);
    }

    $(document).ready(function () {
        MaskControls();
        SetButtonVisibility();
        LoadAddOnServicesInfo();
        // MinInDay = @ViewBag.MinInDay;
        // alert(MinInDay);
        POPSetDates();
    });

</script>